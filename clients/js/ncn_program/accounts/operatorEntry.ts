/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export type OperatorEntry = {
  discriminator: bigint;
  ncn: Address;
  operatorPubkey: Address;
  g1Pubkey: ReadonlyUint8Array;
  g2Pubkey: ReadonlyUint8Array;
  operatorIndex: bigint;
  slotRegistered: bigint;
  bump: number;
  reserved: Array<number>;
};

export type OperatorEntryArgs = {
  discriminator: number | bigint;
  ncn: Address;
  operatorPubkey: Address;
  g1Pubkey: ReadonlyUint8Array;
  g2Pubkey: ReadonlyUint8Array;
  operatorIndex: number | bigint;
  slotRegistered: number | bigint;
  bump: number;
  reserved: Array<number>;
};

export function getOperatorEntryEncoder(): Encoder<OperatorEntryArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['operatorPubkey', getAddressEncoder()],
    ['g1Pubkey', fixEncoderSize(getBytesEncoder(), 32)],
    ['g2Pubkey', fixEncoderSize(getBytesEncoder(), 64)],
    ['operatorIndex', getU64Encoder()],
    ['slotRegistered', getU64Encoder()],
    ['bump', getU8Encoder()],
    ['reserved', getArrayEncoder(getU8Encoder(), { size: 199 })],
  ]);
}

export function getOperatorEntryDecoder(): Decoder<OperatorEntry> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['operatorPubkey', getAddressDecoder()],
    ['g1Pubkey', fixDecoderSize(getBytesDecoder(), 32)],
    ['g2Pubkey', fixDecoderSize(getBytesDecoder(), 64)],
    ['operatorIndex', getU64Decoder()],
    ['slotRegistered', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 199 })],
  ]);
}

export function getOperatorEntryCodec(): Codec<
  OperatorEntryArgs,
  OperatorEntry
> {
  return combineCodec(getOperatorEntryEncoder(), getOperatorEntryDecoder());
}

export function decodeOperatorEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<OperatorEntry, TAddress>;
export function decodeOperatorEntry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<OperatorEntry, TAddress>;
export function decodeOperatorEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<OperatorEntry, TAddress> | MaybeAccount<OperatorEntry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOperatorEntryDecoder()
  );
}

export async function fetchOperatorEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<OperatorEntry, TAddress>> {
  const maybeAccount = await fetchMaybeOperatorEntry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOperatorEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<OperatorEntry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOperatorEntry(maybeAccount);
}

export async function fetchAllOperatorEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<OperatorEntry>[]> {
  const maybeAccounts = await fetchAllMaybeOperatorEntry(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOperatorEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<OperatorEntry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOperatorEntry(maybeAccount));
}
