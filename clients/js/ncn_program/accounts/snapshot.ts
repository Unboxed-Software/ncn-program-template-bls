/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  getOperatorSnapshotDecoder,
  getOperatorSnapshotEncoder,
  getStakeWeightsDecoder,
  getStakeWeightsEncoder,
  type OperatorSnapshot,
  type OperatorSnapshotArgs,
  type StakeWeights,
  type StakeWeightsArgs,
} from '../types';

export type Snapshot = {
  discriminator: bigint;
  ncn: Address;
  bump: number;
  slotCreated: bigint;
  operatorCount: bigint;
  operatorsRegistered: bigint;
  operatorsCanVoteCount: bigint;
  totalAggregatedG1Pubkey: ReadonlyUint8Array;
  operatorSnapshots: Array<OperatorSnapshot>;
  minimumStake: StakeWeights;
  lastSnapshotSlot: bigint;
};

export type SnapshotArgs = {
  discriminator: number | bigint;
  ncn: Address;
  bump: number;
  slotCreated: number | bigint;
  operatorCount: number | bigint;
  operatorsRegistered: number | bigint;
  operatorsCanVoteCount: number | bigint;
  totalAggregatedG1Pubkey: ReadonlyUint8Array;
  operatorSnapshots: Array<OperatorSnapshotArgs>;
  minimumStake: StakeWeightsArgs;
  lastSnapshotSlot: number | bigint;
};

export function getSnapshotEncoder(): Encoder<SnapshotArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['bump', getU8Encoder()],
    ['slotCreated', getU64Encoder()],
    ['operatorCount', getU64Encoder()],
    ['operatorsRegistered', getU64Encoder()],
    ['operatorsCanVoteCount', getU64Encoder()],
    ['totalAggregatedG1Pubkey', fixEncoderSize(getBytesEncoder(), 32)],
    [
      'operatorSnapshots',
      getArrayEncoder(getOperatorSnapshotEncoder(), { size: 256 }),
    ],
    ['minimumStake', getStakeWeightsEncoder()],
    ['lastSnapshotSlot', getU64Encoder()],
  ]);
}

export function getSnapshotDecoder(): Decoder<Snapshot> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['slotCreated', getU64Decoder()],
    ['operatorCount', getU64Decoder()],
    ['operatorsRegistered', getU64Decoder()],
    ['operatorsCanVoteCount', getU64Decoder()],
    ['totalAggregatedG1Pubkey', fixDecoderSize(getBytesDecoder(), 32)],
    [
      'operatorSnapshots',
      getArrayDecoder(getOperatorSnapshotDecoder(), { size: 256 }),
    ],
    ['minimumStake', getStakeWeightsDecoder()],
    ['lastSnapshotSlot', getU64Decoder()],
  ]);
}

export function getSnapshotCodec(): Codec<SnapshotArgs, Snapshot> {
  return combineCodec(getSnapshotEncoder(), getSnapshotDecoder());
}

export function decodeSnapshot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Snapshot, TAddress>;
export function decodeSnapshot<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Snapshot, TAddress>;
export function decodeSnapshot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Snapshot, TAddress> | MaybeAccount<Snapshot, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSnapshotDecoder()
  );
}

export async function fetchSnapshot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Snapshot, TAddress>> {
  const maybeAccount = await fetchMaybeSnapshot(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSnapshot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Snapshot, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSnapshot(maybeAccount);
}

export async function fetchAllSnapshot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Snapshot>[]> {
  const maybeAccounts = await fetchAllMaybeSnapshot(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSnapshot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Snapshot>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSnapshot(maybeAccount));
}
