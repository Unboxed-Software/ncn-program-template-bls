/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedAdminRegisterStMintInstruction,
  type ParsedAdminSetNewAdminInstruction,
  type ParsedAdminSetParametersInstruction,
  type ParsedCastVoteInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeSnapshotInstruction,
  type ParsedInitializeVaultRegistryInstruction,
  type ParsedInitializeVoteCounterInstruction,
  type ParsedReallocSnapshotInstruction,
  type ParsedRegisterOperatorInstruction,
  type ParsedRegisterVaultInstruction,
  type ParsedSnapshotVaultOperatorDelegationInstruction,
  type ParsedUpdateOperatorBN128KeysInstruction,
  type ParsedUpdateOperatorIpSocketInstruction,
} from '../instructions';

export const NCN_PROGRAM_PROGRAM_ADDRESS =
  '3fKQSi6VzzDUJSmeksS8qK6RB3Gs3UoZWtsQD3xagy45' as Address<'3fKQSi6VzzDUJSmeksS8qK6RB3Gs3UoZWtsQD3xagy45'>;

export enum NcnProgramAccount {
  Config,
  NCNOperatorAccount,
  Snapshot,
  VaultRegistry,
  VoteCounter,
}

export enum NcnProgramInstruction {
  InitializeConfig,
  InitializeVaultRegistry,
  RegisterVault,
  RegisterOperator,
  UpdateOperatorBN128Keys,
  UpdateOperatorIpSocket,
  InitializeVoteCounter,
  InitializeSnapshot,
  ReallocSnapshot,
  SnapshotVaultOperatorDelegation,
  CastVote,
  AdminSetParameters,
  AdminSetNewAdmin,
  AdminRegisterStMint,
}

export function identifyNcnProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): NcnProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return NcnProgramInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return NcnProgramInstruction.InitializeVaultRegistry;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return NcnProgramInstruction.RegisterVault;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return NcnProgramInstruction.RegisterOperator;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return NcnProgramInstruction.UpdateOperatorBN128Keys;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return NcnProgramInstruction.UpdateOperatorIpSocket;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return NcnProgramInstruction.InitializeVoteCounter;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return NcnProgramInstruction.InitializeSnapshot;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return NcnProgramInstruction.ReallocSnapshot;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return NcnProgramInstruction.SnapshotVaultOperatorDelegation;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return NcnProgramInstruction.CastVote;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return NcnProgramInstruction.AdminSetParameters;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return NcnProgramInstruction.AdminSetNewAdmin;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return NcnProgramInstruction.AdminRegisterStMint;
  }
  throw new Error(
    'The provided instruction could not be identified as a ncnProgram instruction.'
  );
}

export type ParsedNcnProgramInstruction<
  TProgram extends string = '3fKQSi6VzzDUJSmeksS8qK6RB3Gs3UoZWtsQD3xagy45',
> =
  | ({
      instructionType: NcnProgramInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeVaultRegistry;
    } & ParsedInitializeVaultRegistryInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.RegisterVault;
    } & ParsedRegisterVaultInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.RegisterOperator;
    } & ParsedRegisterOperatorInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.UpdateOperatorBN128Keys;
    } & ParsedUpdateOperatorBN128KeysInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.UpdateOperatorIpSocket;
    } & ParsedUpdateOperatorIpSocketInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeVoteCounter;
    } & ParsedInitializeVoteCounterInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeSnapshot;
    } & ParsedInitializeSnapshotInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.ReallocSnapshot;
    } & ParsedReallocSnapshotInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.SnapshotVaultOperatorDelegation;
    } & ParsedSnapshotVaultOperatorDelegationInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetParameters;
    } & ParsedAdminSetParametersInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetNewAdmin;
    } & ParsedAdminSetNewAdminInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminRegisterStMint;
    } & ParsedAdminRegisterStMintInstruction<TProgram>);
