/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedAdminRegisterStMintInstruction,
  type ParsedAdminSetNewAdminInstruction,
  type ParsedAdminSetParametersInstruction,
  type ParsedAdminSetStMintInstruction,
  type ParsedAdminSetTieBreakerInstruction,
  type ParsedAdminSetWeightInstruction,
  type ParsedCastVoteInstruction,
  type ParsedCloseEpochAccountInstruction,
  type ParsedDistributeNCNRewardsInstruction,
  type ParsedDistributeOperatorRewardsInstruction,
  type ParsedDistributeOperatorVaultRewardRouteInstruction,
  type ParsedDistributeProtocolRewardsInstruction,
  type ParsedDistributeVaultRewardsInstruction,
  type ParsedInitializeBallotBoxInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeEpochSnapshotInstruction,
  type ParsedInitializeEpochStateInstruction,
  type ParsedInitializeNCNRewardRouterInstruction,
  type ParsedInitializeOperatorRegistryInstruction,
  type ParsedInitializeOperatorSnapshotInstruction,
  type ParsedInitializeOperatorVaultRewardRouterInstruction,
  type ParsedInitializeVaultRegistryInstruction,
  type ParsedInitializeWeightTableInstruction,
  type ParsedReallocBallotBoxInstruction,
  type ParsedReallocNCNRewardRouterInstruction,
  type ParsedReallocOperatorRegistryInstruction,
  type ParsedReallocVaultRegistryInstruction,
  type ParsedReallocWeightTableInstruction,
  type ParsedRegisterOperatorInstruction,
  type ParsedRegisterVaultInstruction,
  type ParsedRouteNCNRewardsInstruction,
  type ParsedRouteOperatorVaultRewardsInstruction,
  type ParsedSetEpochWeightsInstruction,
  type ParsedSnapshotVaultOperatorDelegationInstruction,
} from '../instructions';

export const NCN_PROGRAM_PROGRAM_ADDRESS =
  '5SiK283D1iFSqHvr8vbNWCBjbjRXeEYS79CLax7nosPf' as Address<'5SiK283D1iFSqHvr8vbNWCBjbjRXeEYS79CLax7nosPf'>;

export enum NcnProgramAccount {
  BallotBox,
  Config,
  ConsensusResult,
  EpochMarker,
  EpochSnapshot,
  OperatorSnapshot,
  EpochState,
  NCNRewardRouter,
  OperatorRegistry,
  OperatorVaultRewardRouter,
  VaultRegistry,
  WeightTable,
}

export enum NcnProgramInstruction {
  InitializeConfig,
  InitializeVaultRegistry,
  ReallocVaultRegistry,
  RegisterVault,
  InitializeOperatorRegistry,
  RegisterOperator,
  ReallocOperatorRegistry,
  InitializeEpochState,
  InitializeWeightTable,
  SetEpochWeights,
  ReallocWeightTable,
  InitializeEpochSnapshot,
  InitializeOperatorSnapshot,
  SnapshotVaultOperatorDelegation,
  InitializeBallotBox,
  ReallocBallotBox,
  CastVote,
  InitializeNCNRewardRouter,
  ReallocNCNRewardRouter,
  RouteNCNRewards,
  DistributeProtocolRewards,
  DistributeNCNRewards,
  InitializeOperatorVaultRewardRouter,
  DistributeOperatorVaultRewardRoute,
  RouteOperatorVaultRewards,
  CloseEpochAccount,
  DistributeOperatorRewards,
  DistributeVaultRewards,
  AdminSetParameters,
  AdminSetNewAdmin,
  AdminSetTieBreaker,
  AdminSetWeight,
  AdminRegisterStMint,
  AdminSetStMint,
}

export function identifyNcnProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): NcnProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return NcnProgramInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return NcnProgramInstruction.InitializeVaultRegistry;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return NcnProgramInstruction.ReallocVaultRegistry;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return NcnProgramInstruction.RegisterVault;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return NcnProgramInstruction.InitializeOperatorRegistry;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return NcnProgramInstruction.RegisterOperator;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return NcnProgramInstruction.ReallocOperatorRegistry;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return NcnProgramInstruction.InitializeEpochState;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return NcnProgramInstruction.InitializeWeightTable;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return NcnProgramInstruction.SetEpochWeights;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return NcnProgramInstruction.ReallocWeightTable;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return NcnProgramInstruction.InitializeEpochSnapshot;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return NcnProgramInstruction.InitializeOperatorSnapshot;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return NcnProgramInstruction.SnapshotVaultOperatorDelegation;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return NcnProgramInstruction.InitializeBallotBox;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return NcnProgramInstruction.ReallocBallotBox;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return NcnProgramInstruction.CastVote;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return NcnProgramInstruction.InitializeNCNRewardRouter;
  }
  if (containsBytes(data, getU8Encoder().encode(18), 0)) {
    return NcnProgramInstruction.ReallocNCNRewardRouter;
  }
  if (containsBytes(data, getU8Encoder().encode(19), 0)) {
    return NcnProgramInstruction.RouteNCNRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(20), 0)) {
    return NcnProgramInstruction.DistributeProtocolRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(21), 0)) {
    return NcnProgramInstruction.DistributeNCNRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(22), 0)) {
    return NcnProgramInstruction.InitializeOperatorVaultRewardRouter;
  }
  if (containsBytes(data, getU8Encoder().encode(23), 0)) {
    return NcnProgramInstruction.DistributeOperatorVaultRewardRoute;
  }
  if (containsBytes(data, getU8Encoder().encode(24), 0)) {
    return NcnProgramInstruction.RouteOperatorVaultRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(25), 0)) {
    return NcnProgramInstruction.CloseEpochAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(26), 0)) {
    return NcnProgramInstruction.DistributeOperatorRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(27), 0)) {
    return NcnProgramInstruction.DistributeVaultRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(28), 0)) {
    return NcnProgramInstruction.AdminSetParameters;
  }
  if (containsBytes(data, getU8Encoder().encode(29), 0)) {
    return NcnProgramInstruction.AdminSetNewAdmin;
  }
  if (containsBytes(data, getU8Encoder().encode(30), 0)) {
    return NcnProgramInstruction.AdminSetTieBreaker;
  }
  if (containsBytes(data, getU8Encoder().encode(31), 0)) {
    return NcnProgramInstruction.AdminSetWeight;
  }
  if (containsBytes(data, getU8Encoder().encode(32), 0)) {
    return NcnProgramInstruction.AdminRegisterStMint;
  }
  if (containsBytes(data, getU8Encoder().encode(33), 0)) {
    return NcnProgramInstruction.AdminSetStMint;
  }
  throw new Error(
    'The provided instruction could not be identified as a ncnProgram instruction.'
  );
}

export type ParsedNcnProgramInstruction<
  TProgram extends string = '5SiK283D1iFSqHvr8vbNWCBjbjRXeEYS79CLax7nosPf',
> =
  | ({
      instructionType: NcnProgramInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeVaultRegistry;
    } & ParsedInitializeVaultRegistryInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.ReallocVaultRegistry;
    } & ParsedReallocVaultRegistryInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.RegisterVault;
    } & ParsedRegisterVaultInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeOperatorRegistry;
    } & ParsedInitializeOperatorRegistryInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.RegisterOperator;
    } & ParsedRegisterOperatorInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.ReallocOperatorRegistry;
    } & ParsedReallocOperatorRegistryInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeEpochState;
    } & ParsedInitializeEpochStateInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeWeightTable;
    } & ParsedInitializeWeightTableInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.SetEpochWeights;
    } & ParsedSetEpochWeightsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.ReallocWeightTable;
    } & ParsedReallocWeightTableInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeEpochSnapshot;
    } & ParsedInitializeEpochSnapshotInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeOperatorSnapshot;
    } & ParsedInitializeOperatorSnapshotInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.SnapshotVaultOperatorDelegation;
    } & ParsedSnapshotVaultOperatorDelegationInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeBallotBox;
    } & ParsedInitializeBallotBoxInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.ReallocBallotBox;
    } & ParsedReallocBallotBoxInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeNCNRewardRouter;
    } & ParsedInitializeNCNRewardRouterInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.ReallocNCNRewardRouter;
    } & ParsedReallocNCNRewardRouterInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.RouteNCNRewards;
    } & ParsedRouteNCNRewardsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.DistributeProtocolRewards;
    } & ParsedDistributeProtocolRewardsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.DistributeNCNRewards;
    } & ParsedDistributeNCNRewardsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.InitializeOperatorVaultRewardRouter;
    } & ParsedInitializeOperatorVaultRewardRouterInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.DistributeOperatorVaultRewardRoute;
    } & ParsedDistributeOperatorVaultRewardRouteInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.RouteOperatorVaultRewards;
    } & ParsedRouteOperatorVaultRewardsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.CloseEpochAccount;
    } & ParsedCloseEpochAccountInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.DistributeOperatorRewards;
    } & ParsedDistributeOperatorRewardsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.DistributeVaultRewards;
    } & ParsedDistributeVaultRewardsInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetParameters;
    } & ParsedAdminSetParametersInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetNewAdmin;
    } & ParsedAdminSetNewAdminInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetTieBreaker;
    } & ParsedAdminSetTieBreakerInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetWeight;
    } & ParsedAdminSetWeightInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminRegisterStMint;
    } & ParsedAdminRegisterStMintInstruction<TProgram>)
  | ({
      instructionType: NcnProgramInstruction.AdminSetStMint;
    } & ParsedAdminSetStMintInstruction<TProgram>);
