/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISTRIBUTE_OPERATOR_REWARDS_DISCRIMINATOR = 26;

export function getDistributeOperatorRewardsDiscriminatorBytes() {
  return getU8Encoder().encode(DISTRIBUTE_OPERATOR_REWARDS_DISCRIMINATOR);
}

export type DistributeOperatorRewardsInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountEpochState extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountOperatorSnapshot extends string | IAccountMeta<string> = string,
  TAccountOperatorVaultRewardRouter extends
    | string
    | IAccountMeta<string> = string,
  TAccountOperatorVaultRewardReceiver extends
    | string
    | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEpochState extends string
        ? WritableAccount<TAccountEpochState>
        : TAccountEpochState,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountOperator extends string
        ? WritableAccount<TAccountOperator>
        : TAccountOperator,
      TAccountOperatorSnapshot extends string
        ? WritableAccount<TAccountOperatorSnapshot>
        : TAccountOperatorSnapshot,
      TAccountOperatorVaultRewardRouter extends string
        ? WritableAccount<TAccountOperatorVaultRewardRouter>
        : TAccountOperatorVaultRewardRouter,
      TAccountOperatorVaultRewardReceiver extends string
        ? WritableAccount<TAccountOperatorVaultRewardReceiver>
        : TAccountOperatorVaultRewardReceiver,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DistributeOperatorRewardsInstructionData = {
  discriminator: number;
  epoch: bigint;
};

export type DistributeOperatorRewardsInstructionDataArgs = {
  epoch: number | bigint;
};

export function getDistributeOperatorRewardsInstructionDataEncoder(): Encoder<DistributeOperatorRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DISTRIBUTE_OPERATOR_REWARDS_DISCRIMINATOR,
    })
  );
}

export function getDistributeOperatorRewardsInstructionDataDecoder(): Decoder<DistributeOperatorRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getDistributeOperatorRewardsInstructionDataCodec(): Codec<
  DistributeOperatorRewardsInstructionDataArgs,
  DistributeOperatorRewardsInstructionData
> {
  return combineCodec(
    getDistributeOperatorRewardsInstructionDataEncoder(),
    getDistributeOperatorRewardsInstructionDataDecoder()
  );
}

export type DistributeOperatorRewardsInput<
  TAccountEpochState extends string = string,
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountOperator extends string = string,
  TAccountOperatorSnapshot extends string = string,
  TAccountOperatorVaultRewardRouter extends string = string,
  TAccountOperatorVaultRewardReceiver extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  epochState: Address<TAccountEpochState>;
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  operator: Address<TAccountOperator>;
  operatorSnapshot: Address<TAccountOperatorSnapshot>;
  operatorVaultRewardRouter: Address<TAccountOperatorVaultRewardRouter>;
  operatorVaultRewardReceiver: Address<TAccountOperatorVaultRewardReceiver>;
  systemProgram?: Address<TAccountSystemProgram>;
  epoch: DistributeOperatorRewardsInstructionDataArgs['epoch'];
};

export function getDistributeOperatorRewardsInstruction<
  TAccountEpochState extends string,
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountOperator extends string,
  TAccountOperatorSnapshot extends string,
  TAccountOperatorVaultRewardRouter extends string,
  TAccountOperatorVaultRewardReceiver extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: DistributeOperatorRewardsInput<
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountOperatorSnapshot,
    TAccountOperatorVaultRewardRouter,
    TAccountOperatorVaultRewardReceiver,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeOperatorRewardsInstruction<
  TProgramAddress,
  TAccountEpochState,
  TAccountConfig,
  TAccountNcn,
  TAccountOperator,
  TAccountOperatorSnapshot,
  TAccountOperatorVaultRewardRouter,
  TAccountOperatorVaultRewardReceiver,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    epochState: { value: input.epochState ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: true },
    operatorSnapshot: {
      value: input.operatorSnapshot ?? null,
      isWritable: true,
    },
    operatorVaultRewardRouter: {
      value: input.operatorVaultRewardRouter ?? null,
      isWritable: true,
    },
    operatorVaultRewardReceiver: {
      value: input.operatorVaultRewardReceiver ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.epochState),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.operatorSnapshot),
      getAccountMeta(accounts.operatorVaultRewardRouter),
      getAccountMeta(accounts.operatorVaultRewardReceiver),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDistributeOperatorRewardsInstructionDataEncoder().encode(
      args as DistributeOperatorRewardsInstructionDataArgs
    ),
  } as DistributeOperatorRewardsInstruction<
    TProgramAddress,
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountOperator,
    TAccountOperatorSnapshot,
    TAccountOperatorVaultRewardRouter,
    TAccountOperatorVaultRewardReceiver,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDistributeOperatorRewardsInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    epochState: TAccountMetas[0];
    config: TAccountMetas[1];
    ncn: TAccountMetas[2];
    operator: TAccountMetas[3];
    operatorSnapshot: TAccountMetas[4];
    operatorVaultRewardRouter: TAccountMetas[5];
    operatorVaultRewardReceiver: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: DistributeOperatorRewardsInstructionData;
};

export function parseDistributeOperatorRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDistributeOperatorRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      epochState: getNextAccount(),
      config: getNextAccount(),
      ncn: getNextAccount(),
      operator: getNextAccount(),
      operatorSnapshot: getNextAccount(),
      operatorVaultRewardRouter: getNextAccount(),
      operatorVaultRewardReceiver: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDistributeOperatorRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
