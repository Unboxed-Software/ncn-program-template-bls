/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ROUTE_N_C_N_REWARDS_DISCRIMINATOR = 20;

export function getRouteNCNRewardsDiscriminatorBytes() {
  return getU8Encoder().encode(ROUTE_N_C_N_REWARDS_DISCRIMINATOR);
}

export type RouteNCNRewardsInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountEpochState extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountEpochSnapshot extends string | IAccountMeta<string> = string,
  TAccountBallotBox extends string | IAccountMeta<string> = string,
  TAccountNcnRewardRouter extends string | IAccountMeta<string> = string,
  TAccountNcnRewardReceiver extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEpochState extends string
        ? WritableAccount<TAccountEpochState>
        : TAccountEpochState,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountEpochSnapshot extends string
        ? ReadonlyAccount<TAccountEpochSnapshot>
        : TAccountEpochSnapshot,
      TAccountBallotBox extends string
        ? ReadonlyAccount<TAccountBallotBox>
        : TAccountBallotBox,
      TAccountNcnRewardRouter extends string
        ? WritableAccount<TAccountNcnRewardRouter>
        : TAccountNcnRewardRouter,
      TAccountNcnRewardReceiver extends string
        ? WritableAccount<TAccountNcnRewardReceiver>
        : TAccountNcnRewardReceiver,
      ...TRemainingAccounts,
    ]
  >;

export type RouteNCNRewardsInstructionData = {
  discriminator: number;
  maxIterations: number;
  epoch: bigint;
};

export type RouteNCNRewardsInstructionDataArgs = {
  maxIterations: number;
  epoch: number | bigint;
};

export function getRouteNCNRewardsInstructionDataEncoder(): Encoder<RouteNCNRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['maxIterations', getU16Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ROUTE_N_C_N_REWARDS_DISCRIMINATOR })
  );
}

export function getRouteNCNRewardsInstructionDataDecoder(): Decoder<RouteNCNRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['maxIterations', getU16Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getRouteNCNRewardsInstructionDataCodec(): Codec<
  RouteNCNRewardsInstructionDataArgs,
  RouteNCNRewardsInstructionData
> {
  return combineCodec(
    getRouteNCNRewardsInstructionDataEncoder(),
    getRouteNCNRewardsInstructionDataDecoder()
  );
}

export type RouteNCNRewardsInput<
  TAccountEpochState extends string = string,
  TAccountConfig extends string = string,
  TAccountNcn extends string = string,
  TAccountEpochSnapshot extends string = string,
  TAccountBallotBox extends string = string,
  TAccountNcnRewardRouter extends string = string,
  TAccountNcnRewardReceiver extends string = string,
> = {
  epochState: Address<TAccountEpochState>;
  config: Address<TAccountConfig>;
  ncn: Address<TAccountNcn>;
  epochSnapshot: Address<TAccountEpochSnapshot>;
  ballotBox: Address<TAccountBallotBox>;
  ncnRewardRouter: Address<TAccountNcnRewardRouter>;
  ncnRewardReceiver: Address<TAccountNcnRewardReceiver>;
  maxIterations: RouteNCNRewardsInstructionDataArgs['maxIterations'];
  epoch: RouteNCNRewardsInstructionDataArgs['epoch'];
};

export function getRouteNCNRewardsInstruction<
  TAccountEpochState extends string,
  TAccountConfig extends string,
  TAccountNcn extends string,
  TAccountEpochSnapshot extends string,
  TAccountBallotBox extends string,
  TAccountNcnRewardRouter extends string,
  TAccountNcnRewardReceiver extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: RouteNCNRewardsInput<
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountEpochSnapshot,
    TAccountBallotBox,
    TAccountNcnRewardRouter,
    TAccountNcnRewardReceiver
  >,
  config?: { programAddress?: TProgramAddress }
): RouteNCNRewardsInstruction<
  TProgramAddress,
  TAccountEpochState,
  TAccountConfig,
  TAccountNcn,
  TAccountEpochSnapshot,
  TAccountBallotBox,
  TAccountNcnRewardRouter,
  TAccountNcnRewardReceiver
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    epochState: { value: input.epochState ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    epochSnapshot: { value: input.epochSnapshot ?? null, isWritable: false },
    ballotBox: { value: input.ballotBox ?? null, isWritable: false },
    ncnRewardRouter: { value: input.ncnRewardRouter ?? null, isWritable: true },
    ncnRewardReceiver: {
      value: input.ncnRewardReceiver ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.epochState),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.epochSnapshot),
      getAccountMeta(accounts.ballotBox),
      getAccountMeta(accounts.ncnRewardRouter),
      getAccountMeta(accounts.ncnRewardReceiver),
    ],
    programAddress,
    data: getRouteNCNRewardsInstructionDataEncoder().encode(
      args as RouteNCNRewardsInstructionDataArgs
    ),
  } as RouteNCNRewardsInstruction<
    TProgramAddress,
    TAccountEpochState,
    TAccountConfig,
    TAccountNcn,
    TAccountEpochSnapshot,
    TAccountBallotBox,
    TAccountNcnRewardRouter,
    TAccountNcnRewardReceiver
  >;

  return instruction;
}

export type ParsedRouteNCNRewardsInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    epochState: TAccountMetas[0];
    config: TAccountMetas[1];
    ncn: TAccountMetas[2];
    epochSnapshot: TAccountMetas[3];
    ballotBox: TAccountMetas[4];
    ncnRewardRouter: TAccountMetas[5];
    ncnRewardReceiver: TAccountMetas[6];
  };
  data: RouteNCNRewardsInstructionData;
};

export function parseRouteNCNRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRouteNCNRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      epochState: getNextAccount(),
      config: getNextAccount(),
      ncn: getNextAccount(),
      epochSnapshot: getNextAccount(),
      ballotBox: getNextAccount(),
      ncnRewardRouter: getNextAccount(),
      ncnRewardReceiver: getNextAccount(),
    },
    data: getRouteNCNRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
