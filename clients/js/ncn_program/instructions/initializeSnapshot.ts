/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_SNAPSHOT_DISCRIMINATOR = 6;

export function getInitializeSnapshotDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_SNAPSHOT_DISCRIMINATOR);
}

export type InitializeSnapshotInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountSnapshot extends string | IAccountMeta<string> = string,
  TAccountAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountSnapshot extends string
        ? WritableAccount<TAccountSnapshot>
        : TAccountSnapshot,
      TAccountAccountPayer extends string
        ? WritableAccount<TAccountAccountPayer>
        : TAccountAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeSnapshotInstructionData = { discriminator: number };

export type InitializeSnapshotInstructionDataArgs = {};

export function getInitializeSnapshotInstructionDataEncoder(): Encoder<InitializeSnapshotInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INITIALIZE_SNAPSHOT_DISCRIMINATOR })
  );
}

export function getInitializeSnapshotInstructionDataDecoder(): Decoder<InitializeSnapshotInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializeSnapshotInstructionDataCodec(): Codec<
  InitializeSnapshotInstructionDataArgs,
  InitializeSnapshotInstructionData
> {
  return combineCodec(
    getInitializeSnapshotInstructionDataEncoder(),
    getInitializeSnapshotInstructionDataDecoder()
  );
}

export type InitializeSnapshotInput<
  TAccountNcn extends string = string,
  TAccountSnapshot extends string = string,
  TAccountAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  ncn: Address<TAccountNcn>;
  snapshot: Address<TAccountSnapshot>;
  accountPayer: Address<TAccountAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeSnapshotInstruction<
  TAccountNcn extends string,
  TAccountSnapshot extends string,
  TAccountAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeSnapshotInput<
    TAccountNcn,
    TAccountSnapshot,
    TAccountAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeSnapshotInstruction<
  TProgramAddress,
  TAccountNcn,
  TAccountSnapshot,
  TAccountAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    ncn: { value: input.ncn ?? null, isWritable: false },
    snapshot: { value: input.snapshot ?? null, isWritable: true },
    accountPayer: { value: input.accountPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.snapshot),
      getAccountMeta(accounts.accountPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeSnapshotInstructionDataEncoder().encode({}),
  } as InitializeSnapshotInstruction<
    TProgramAddress,
    TAccountNcn,
    TAccountSnapshot,
    TAccountAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeSnapshotInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    ncn: TAccountMetas[0];
    snapshot: TAccountMetas[1];
    accountPayer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeSnapshotInstructionData;
};

export function parseInitializeSnapshotInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeSnapshotInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      ncn: getNextAccount(),
      snapshot: getNextAccount(),
      accountPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeSnapshotInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
