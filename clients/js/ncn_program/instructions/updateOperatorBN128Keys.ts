/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_OPERATOR_B_N128_KEYS_DISCRIMINATOR = 6;

export function getUpdateOperatorBN128KeysDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_OPERATOR_B_N128_KEYS_DISCRIMINATOR);
}

export type UpdateOperatorBN128KeysInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountOperatorRegistry extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountOperatorAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountOperatorRegistry extends string
        ? WritableAccount<TAccountOperatorRegistry>
        : TAccountOperatorRegistry,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountOperatorAdmin extends string
        ? ReadonlySignerAccount<TAccountOperatorAdmin> &
            IAccountSignerMeta<TAccountOperatorAdmin>
        : TAccountOperatorAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateOperatorBN128KeysInstructionData = {
  discriminator: number;
  g1Pubkey: ReadonlyUint8Array;
  g2Pubkey: ReadonlyUint8Array;
  signature: ReadonlyUint8Array;
};

export type UpdateOperatorBN128KeysInstructionDataArgs = {
  g1Pubkey: ReadonlyUint8Array;
  g2Pubkey: ReadonlyUint8Array;
  signature: ReadonlyUint8Array;
};

export function getUpdateOperatorBN128KeysInstructionDataEncoder(): Encoder<UpdateOperatorBN128KeysInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['g1Pubkey', fixEncoderSize(getBytesEncoder(), 32)],
      ['g2Pubkey', fixEncoderSize(getBytesEncoder(), 64)],
      ['signature', fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_OPERATOR_B_N128_KEYS_DISCRIMINATOR,
    })
  );
}

export function getUpdateOperatorBN128KeysInstructionDataDecoder(): Decoder<UpdateOperatorBN128KeysInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['g1Pubkey', fixDecoderSize(getBytesDecoder(), 32)],
    ['g2Pubkey', fixDecoderSize(getBytesDecoder(), 64)],
    ['signature', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getUpdateOperatorBN128KeysInstructionDataCodec(): Codec<
  UpdateOperatorBN128KeysInstructionDataArgs,
  UpdateOperatorBN128KeysInstructionData
> {
  return combineCodec(
    getUpdateOperatorBN128KeysInstructionDataEncoder(),
    getUpdateOperatorBN128KeysInstructionDataDecoder()
  );
}

export type UpdateOperatorBN128KeysInput<
  TAccountConfig extends string = string,
  TAccountOperatorRegistry extends string = string,
  TAccountNcn extends string = string,
  TAccountOperator extends string = string,
  TAccountOperatorAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  operatorRegistry: Address<TAccountOperatorRegistry>;
  ncn: Address<TAccountNcn>;
  operator: Address<TAccountOperator>;
  operatorAdmin: TransactionSigner<TAccountOperatorAdmin>;
  g1Pubkey: UpdateOperatorBN128KeysInstructionDataArgs['g1Pubkey'];
  g2Pubkey: UpdateOperatorBN128KeysInstructionDataArgs['g2Pubkey'];
  signature: UpdateOperatorBN128KeysInstructionDataArgs['signature'];
};

export function getUpdateOperatorBN128KeysInstruction<
  TAccountConfig extends string,
  TAccountOperatorRegistry extends string,
  TAccountNcn extends string,
  TAccountOperator extends string,
  TAccountOperatorAdmin extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UpdateOperatorBN128KeysInput<
    TAccountConfig,
    TAccountOperatorRegistry,
    TAccountNcn,
    TAccountOperator,
    TAccountOperatorAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateOperatorBN128KeysInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountOperatorRegistry,
  TAccountNcn,
  TAccountOperator,
  TAccountOperatorAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    operatorRegistry: {
      value: input.operatorRegistry ?? null,
      isWritable: true,
    },
    ncn: { value: input.ncn ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    operatorAdmin: { value: input.operatorAdmin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.operatorRegistry),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.operatorAdmin),
    ],
    programAddress,
    data: getUpdateOperatorBN128KeysInstructionDataEncoder().encode(
      args as UpdateOperatorBN128KeysInstructionDataArgs
    ),
  } as UpdateOperatorBN128KeysInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountOperatorRegistry,
    TAccountNcn,
    TAccountOperator,
    TAccountOperatorAdmin
  >;

  return instruction;
}

export type ParsedUpdateOperatorBN128KeysInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    operatorRegistry: TAccountMetas[1];
    ncn: TAccountMetas[2];
    operator: TAccountMetas[3];
    operatorAdmin: TAccountMetas[4];
  };
  data: UpdateOperatorBN128KeysInstructionData;
};

export function parseUpdateOperatorBN128KeysInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateOperatorBN128KeysInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      operatorRegistry: getNextAccount(),
      ncn: getNextAccount(),
      operator: getNextAccount(),
      operatorAdmin: getNextAccount(),
    },
    data: getUpdateOperatorBN128KeysInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
