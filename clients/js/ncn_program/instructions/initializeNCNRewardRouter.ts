/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_N_C_N_REWARD_ROUTER_DISCRIMINATOR = 18;

export function getInitializeNCNRewardRouterDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_N_C_N_REWARD_ROUTER_DISCRIMINATOR);
}

export type InitializeNCNRewardRouterInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountEpochMarker extends string | IAccountMeta<string> = string,
  TAccountEpochState extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountNcnRewardRouter extends string | IAccountMeta<string> = string,
  TAccountNcnRewardReceiver extends string | IAccountMeta<string> = string,
  TAccountAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEpochMarker extends string
        ? ReadonlyAccount<TAccountEpochMarker>
        : TAccountEpochMarker,
      TAccountEpochState extends string
        ? ReadonlyAccount<TAccountEpochState>
        : TAccountEpochState,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountNcnRewardRouter extends string
        ? WritableAccount<TAccountNcnRewardRouter>
        : TAccountNcnRewardRouter,
      TAccountNcnRewardReceiver extends string
        ? WritableAccount<TAccountNcnRewardReceiver>
        : TAccountNcnRewardReceiver,
      TAccountAccountPayer extends string
        ? WritableAccount<TAccountAccountPayer>
        : TAccountAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeNCNRewardRouterInstructionData = {
  discriminator: number;
  epoch: bigint;
};

export type InitializeNCNRewardRouterInstructionDataArgs = {
  epoch: number | bigint;
};

export function getInitializeNCNRewardRouterInstructionDataEncoder(): Encoder<InitializeNCNRewardRouterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['epoch', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_N_C_N_REWARD_ROUTER_DISCRIMINATOR,
    })
  );
}

export function getInitializeNCNRewardRouterInstructionDataDecoder(): Decoder<InitializeNCNRewardRouterInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['epoch', getU64Decoder()],
  ]);
}

export function getInitializeNCNRewardRouterInstructionDataCodec(): Codec<
  InitializeNCNRewardRouterInstructionDataArgs,
  InitializeNCNRewardRouterInstructionData
> {
  return combineCodec(
    getInitializeNCNRewardRouterInstructionDataEncoder(),
    getInitializeNCNRewardRouterInstructionDataDecoder()
  );
}

export type InitializeNCNRewardRouterInput<
  TAccountEpochMarker extends string = string,
  TAccountEpochState extends string = string,
  TAccountNcn extends string = string,
  TAccountNcnRewardRouter extends string = string,
  TAccountNcnRewardReceiver extends string = string,
  TAccountAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  epochMarker: Address<TAccountEpochMarker>;
  epochState: Address<TAccountEpochState>;
  ncn: Address<TAccountNcn>;
  ncnRewardRouter: Address<TAccountNcnRewardRouter>;
  ncnRewardReceiver: Address<TAccountNcnRewardReceiver>;
  accountPayer: Address<TAccountAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  epoch: InitializeNCNRewardRouterInstructionDataArgs['epoch'];
};

export function getInitializeNCNRewardRouterInstruction<
  TAccountEpochMarker extends string,
  TAccountEpochState extends string,
  TAccountNcn extends string,
  TAccountNcnRewardRouter extends string,
  TAccountNcnRewardReceiver extends string,
  TAccountAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeNCNRewardRouterInput<
    TAccountEpochMarker,
    TAccountEpochState,
    TAccountNcn,
    TAccountNcnRewardRouter,
    TAccountNcnRewardReceiver,
    TAccountAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeNCNRewardRouterInstruction<
  TProgramAddress,
  TAccountEpochMarker,
  TAccountEpochState,
  TAccountNcn,
  TAccountNcnRewardRouter,
  TAccountNcnRewardReceiver,
  TAccountAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    epochMarker: { value: input.epochMarker ?? null, isWritable: false },
    epochState: { value: input.epochState ?? null, isWritable: false },
    ncn: { value: input.ncn ?? null, isWritable: false },
    ncnRewardRouter: { value: input.ncnRewardRouter ?? null, isWritable: true },
    ncnRewardReceiver: {
      value: input.ncnRewardReceiver ?? null,
      isWritable: true,
    },
    accountPayer: { value: input.accountPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.epochMarker),
      getAccountMeta(accounts.epochState),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.ncnRewardRouter),
      getAccountMeta(accounts.ncnRewardReceiver),
      getAccountMeta(accounts.accountPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeNCNRewardRouterInstructionDataEncoder().encode(
      args as InitializeNCNRewardRouterInstructionDataArgs
    ),
  } as InitializeNCNRewardRouterInstruction<
    TProgramAddress,
    TAccountEpochMarker,
    TAccountEpochState,
    TAccountNcn,
    TAccountNcnRewardRouter,
    TAccountNcnRewardReceiver,
    TAccountAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeNCNRewardRouterInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    epochMarker: TAccountMetas[0];
    epochState: TAccountMetas[1];
    ncn: TAccountMetas[2];
    ncnRewardRouter: TAccountMetas[3];
    ncnRewardReceiver: TAccountMetas[4];
    accountPayer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: InitializeNCNRewardRouterInstructionData;
};

export function parseInitializeNCNRewardRouterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeNCNRewardRouterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      epochMarker: getNextAccount(),
      epochState: getNextAccount(),
      ncn: getNextAccount(),
      ncnRewardRouter: getNextAccount(),
      ncnRewardReceiver: getNextAccount(),
      accountPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeNCNRewardRouterInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
