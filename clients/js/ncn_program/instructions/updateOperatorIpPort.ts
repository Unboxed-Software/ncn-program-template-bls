/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { NCN_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_OPERATOR_IP_PORT_DISCRIMINATOR = 5;

export function getUpdateOperatorIpPortDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_OPERATOR_IP_PORT_DISCRIMINATOR);
}

export type UpdateOperatorIpPortInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountNcnOperatorAccount extends string | IAccountMeta<string> = string,
  TAccountNcn extends string | IAccountMeta<string> = string,
  TAccountOperator extends string | IAccountMeta<string> = string,
  TAccountOperatorAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountNcnOperatorAccount extends string
        ? WritableAccount<TAccountNcnOperatorAccount>
        : TAccountNcnOperatorAccount,
      TAccountNcn extends string ? ReadonlyAccount<TAccountNcn> : TAccountNcn,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountOperatorAdmin extends string
        ? ReadonlySignerAccount<TAccountOperatorAdmin> &
            IAccountSignerMeta<TAccountOperatorAdmin>
        : TAccountOperatorAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateOperatorIpPortInstructionData = {
  discriminator: number;
  ipAddress: Array<number>;
  port: number;
};

export type UpdateOperatorIpPortInstructionDataArgs = {
  ipAddress: Array<number>;
  port: number;
};

export function getUpdateOperatorIpPortInstructionDataEncoder(): Encoder<UpdateOperatorIpPortInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['ipAddress', getArrayEncoder(getU8Encoder(), { size: 4 })],
      ['port', getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_OPERATOR_IP_PORT_DISCRIMINATOR,
    })
  );
}

export function getUpdateOperatorIpPortInstructionDataDecoder(): Decoder<UpdateOperatorIpPortInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['ipAddress', getArrayDecoder(getU8Decoder(), { size: 4 })],
    ['port', getU16Decoder()],
  ]);
}

export function getUpdateOperatorIpPortInstructionDataCodec(): Codec<
  UpdateOperatorIpPortInstructionDataArgs,
  UpdateOperatorIpPortInstructionData
> {
  return combineCodec(
    getUpdateOperatorIpPortInstructionDataEncoder(),
    getUpdateOperatorIpPortInstructionDataDecoder()
  );
}

export type UpdateOperatorIpPortInput<
  TAccountConfig extends string = string,
  TAccountNcnOperatorAccount extends string = string,
  TAccountNcn extends string = string,
  TAccountOperator extends string = string,
  TAccountOperatorAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  ncnOperatorAccount: Address<TAccountNcnOperatorAccount>;
  ncn: Address<TAccountNcn>;
  operator: Address<TAccountOperator>;
  operatorAdmin: TransactionSigner<TAccountOperatorAdmin>;
  ipAddress: UpdateOperatorIpPortInstructionDataArgs['ipAddress'];
  port: UpdateOperatorIpPortInstructionDataArgs['port'];
};

export function getUpdateOperatorIpPortInstruction<
  TAccountConfig extends string,
  TAccountNcnOperatorAccount extends string,
  TAccountNcn extends string,
  TAccountOperator extends string,
  TAccountOperatorAdmin extends string,
  TProgramAddress extends Address = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UpdateOperatorIpPortInput<
    TAccountConfig,
    TAccountNcnOperatorAccount,
    TAccountNcn,
    TAccountOperator,
    TAccountOperatorAdmin
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateOperatorIpPortInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountNcnOperatorAccount,
  TAccountNcn,
  TAccountOperator,
  TAccountOperatorAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? NCN_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    ncnOperatorAccount: {
      value: input.ncnOperatorAccount ?? null,
      isWritable: true,
    },
    ncn: { value: input.ncn ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    operatorAdmin: { value: input.operatorAdmin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.ncnOperatorAccount),
      getAccountMeta(accounts.ncn),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.operatorAdmin),
    ],
    programAddress,
    data: getUpdateOperatorIpPortInstructionDataEncoder().encode(
      args as UpdateOperatorIpPortInstructionDataArgs
    ),
  } as UpdateOperatorIpPortInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountNcnOperatorAccount,
    TAccountNcn,
    TAccountOperator,
    TAccountOperatorAdmin
  >;

  return instruction;
}

export type ParsedUpdateOperatorIpPortInstruction<
  TProgram extends string = typeof NCN_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    ncnOperatorAccount: TAccountMetas[1];
    ncn: TAccountMetas[2];
    operator: TAccountMetas[3];
    operatorAdmin: TAccountMetas[4];
  };
  data: UpdateOperatorIpPortInstructionData;
};

export function parseUpdateOperatorIpPortInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateOperatorIpPortInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      ncnOperatorAccount: getNextAccount(),
      ncn: getNextAccount(),
      operator: getNextAccount(),
      operatorAdmin: getNextAccount(),
    },
    data: getUpdateOperatorIpPortInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
