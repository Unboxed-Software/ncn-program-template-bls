//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct CastVote {
    pub config: solana_program::pubkey::Pubkey,

    pub ncn: solana_program::pubkey::Pubkey,

    pub epoch_snapshot: solana_program::pubkey::Pubkey,

    pub restaking_config: solana_program::pubkey::Pubkey,

    pub vote_counter: solana_program::pubkey::Pubkey,
}

impl CastVote {
    pub fn instruction(
        &self,
        args: CastVoteInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CastVoteInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ncn, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.epoch_snapshot,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.restaking_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vote_counter,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = CastVoteInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::NCN_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct CastVoteInstructionData {
    discriminator: u8,
}

impl CastVoteInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 15 }
    }
}

impl Default for CastVoteInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CastVoteInstructionArgs {
    pub aggregated_signature: [u8; 32],
    pub aggregated_g2: [u8; 64],
    pub operators_signature_bitmap: Vec<u8>,
}

/// Instruction builder for `CastVote`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[]` ncn
///   2. `[]` epoch_snapshot
///   3. `[]` restaking_config
///   4. `[writable]` vote_counter
#[derive(Clone, Debug, Default)]
pub struct CastVoteBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    ncn: Option<solana_program::pubkey::Pubkey>,
    epoch_snapshot: Option<solana_program::pubkey::Pubkey>,
    restaking_config: Option<solana_program::pubkey::Pubkey>,
    vote_counter: Option<solana_program::pubkey::Pubkey>,
    aggregated_signature: Option<[u8; 32]>,
    aggregated_g2: Option<[u8; 64]>,
    operators_signature_bitmap: Option<Vec<u8>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CastVoteBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ncn = Some(ncn);
        self
    }
    #[inline(always)]
    pub fn epoch_snapshot(&mut self, epoch_snapshot: solana_program::pubkey::Pubkey) -> &mut Self {
        self.epoch_snapshot = Some(epoch_snapshot);
        self
    }
    #[inline(always)]
    pub fn restaking_config(
        &mut self,
        restaking_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.restaking_config = Some(restaking_config);
        self
    }
    #[inline(always)]
    pub fn vote_counter(&mut self, vote_counter: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vote_counter = Some(vote_counter);
        self
    }
    #[inline(always)]
    pub fn aggregated_signature(&mut self, aggregated_signature: [u8; 32]) -> &mut Self {
        self.aggregated_signature = Some(aggregated_signature);
        self
    }
    #[inline(always)]
    pub fn aggregated_g2(&mut self, aggregated_g2: [u8; 64]) -> &mut Self {
        self.aggregated_g2 = Some(aggregated_g2);
        self
    }
    #[inline(always)]
    pub fn operators_signature_bitmap(&mut self, operators_signature_bitmap: Vec<u8>) -> &mut Self {
        self.operators_signature_bitmap = Some(operators_signature_bitmap);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CastVote {
            config: self.config.expect("config is not set"),
            ncn: self.ncn.expect("ncn is not set"),
            epoch_snapshot: self.epoch_snapshot.expect("epoch_snapshot is not set"),
            restaking_config: self.restaking_config.expect("restaking_config is not set"),
            vote_counter: self.vote_counter.expect("vote_counter is not set"),
        };
        let args = CastVoteInstructionArgs {
            aggregated_signature: self
                .aggregated_signature
                .clone()
                .expect("aggregated_signature is not set"),
            aggregated_g2: self
                .aggregated_g2
                .clone()
                .expect("aggregated_g2 is not set"),
            operators_signature_bitmap: self
                .operators_signature_bitmap
                .clone()
                .expect("operators_signature_bitmap is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `cast_vote` CPI accounts.
pub struct CastVoteCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn: &'b solana_program::account_info::AccountInfo<'a>,

    pub epoch_snapshot: &'b solana_program::account_info::AccountInfo<'a>,

    pub restaking_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub vote_counter: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `cast_vote` CPI instruction.
pub struct CastVoteCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn: &'b solana_program::account_info::AccountInfo<'a>,

    pub epoch_snapshot: &'b solana_program::account_info::AccountInfo<'a>,

    pub restaking_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub vote_counter: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CastVoteInstructionArgs,
}

impl<'a, 'b> CastVoteCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CastVoteCpiAccounts<'a, 'b>,
        args: CastVoteInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            ncn: accounts.ncn,
            epoch_snapshot: accounts.epoch_snapshot,
            restaking_config: accounts.restaking_config,
            vote_counter: accounts.vote_counter,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ncn.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.epoch_snapshot.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.restaking_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vote_counter.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = CastVoteInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::NCN_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.ncn.clone());
        account_infos.push(self.epoch_snapshot.clone());
        account_infos.push(self.restaking_config.clone());
        account_infos.push(self.vote_counter.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CastVote` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[]` ncn
///   2. `[]` epoch_snapshot
///   3. `[]` restaking_config
///   4. `[writable]` vote_counter
#[derive(Clone, Debug)]
pub struct CastVoteCpiBuilder<'a, 'b> {
    instruction: Box<CastVoteCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CastVoteCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CastVoteCpiBuilderInstruction {
            __program: program,
            config: None,
            ncn: None,
            epoch_snapshot: None,
            restaking_config: None,
            vote_counter: None,
            aggregated_signature: None,
            aggregated_g2: None,
            operators_signature_bitmap: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.ncn = Some(ncn);
        self
    }
    #[inline(always)]
    pub fn epoch_snapshot(
        &mut self,
        epoch_snapshot: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.epoch_snapshot = Some(epoch_snapshot);
        self
    }
    #[inline(always)]
    pub fn restaking_config(
        &mut self,
        restaking_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.restaking_config = Some(restaking_config);
        self
    }
    #[inline(always)]
    pub fn vote_counter(
        &mut self,
        vote_counter: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vote_counter = Some(vote_counter);
        self
    }
    #[inline(always)]
    pub fn aggregated_signature(&mut self, aggregated_signature: [u8; 32]) -> &mut Self {
        self.instruction.aggregated_signature = Some(aggregated_signature);
        self
    }
    #[inline(always)]
    pub fn aggregated_g2(&mut self, aggregated_g2: [u8; 64]) -> &mut Self {
        self.instruction.aggregated_g2 = Some(aggregated_g2);
        self
    }
    #[inline(always)]
    pub fn operators_signature_bitmap(&mut self, operators_signature_bitmap: Vec<u8>) -> &mut Self {
        self.instruction.operators_signature_bitmap = Some(operators_signature_bitmap);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CastVoteInstructionArgs {
            aggregated_signature: self
                .instruction
                .aggregated_signature
                .clone()
                .expect("aggregated_signature is not set"),
            aggregated_g2: self
                .instruction
                .aggregated_g2
                .clone()
                .expect("aggregated_g2 is not set"),
            operators_signature_bitmap: self
                .instruction
                .operators_signature_bitmap
                .clone()
                .expect("operators_signature_bitmap is not set"),
        };
        let instruction = CastVoteCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            ncn: self.instruction.ncn.expect("ncn is not set"),

            epoch_snapshot: self
                .instruction
                .epoch_snapshot
                .expect("epoch_snapshot is not set"),

            restaking_config: self
                .instruction
                .restaking_config
                .expect("restaking_config is not set"),

            vote_counter: self
                .instruction
                .vote_counter
                .expect("vote_counter is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CastVoteCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ncn: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    epoch_snapshot: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    restaking_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vote_counter: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    aggregated_signature: Option<[u8; 32]>,
    aggregated_g2: Option<[u8; 64]>,
    operators_signature_bitmap: Option<Vec<u8>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
