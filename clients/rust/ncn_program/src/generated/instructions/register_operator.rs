//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct RegisterOperator {
    pub config: solana_program::pubkey::Pubkey,

    pub operator_entry: solana_program::pubkey::Pubkey,

    pub ncn: solana_program::pubkey::Pubkey,

    pub operator: solana_program::pubkey::Pubkey,

    pub operator_admin: solana_program::pubkey::Pubkey,

    pub ncn_operator_state: solana_program::pubkey::Pubkey,

    pub restaking_config: solana_program::pubkey::Pubkey,

    pub account_payer: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl RegisterOperator {
    pub fn instruction(
        &self,
        args: RegisterOperatorInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: RegisterOperatorInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator_entry,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ncn, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.operator,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.operator_admin,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ncn_operator_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.restaking_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.account_payer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = RegisterOperatorInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::NCN_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct RegisterOperatorInstructionData {
    discriminator: u8,
}

impl RegisterOperatorInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 3 }
    }
}

impl Default for RegisterOperatorInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct RegisterOperatorInstructionArgs {
    pub g1_pubkey: [u8; 32],
    pub g2_pubkey: [u8; 64],
    pub signature: [u8; 64],
}

/// Instruction builder for `RegisterOperator`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` operator_entry
///   2. `[]` ncn
///   3. `[]` operator
///   4. `[signer]` operator_admin
///   5. `[]` ncn_operator_state
///   6. `[]` restaking_config
///   7. `[writable]` account_payer
///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct RegisterOperatorBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    operator_entry: Option<solana_program::pubkey::Pubkey>,
    ncn: Option<solana_program::pubkey::Pubkey>,
    operator: Option<solana_program::pubkey::Pubkey>,
    operator_admin: Option<solana_program::pubkey::Pubkey>,
    ncn_operator_state: Option<solana_program::pubkey::Pubkey>,
    restaking_config: Option<solana_program::pubkey::Pubkey>,
    account_payer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    g1_pubkey: Option<[u8; 32]>,
    g2_pubkey: Option<[u8; 64]>,
    signature: Option<[u8; 64]>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl RegisterOperatorBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn operator_entry(&mut self, operator_entry: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator_entry = Some(operator_entry);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ncn = Some(ncn);
        self
    }
    #[inline(always)]
    pub fn operator(&mut self, operator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn operator_admin(&mut self, operator_admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator_admin = Some(operator_admin);
        self
    }
    #[inline(always)]
    pub fn ncn_operator_state(
        &mut self,
        ncn_operator_state: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ncn_operator_state = Some(ncn_operator_state);
        self
    }
    #[inline(always)]
    pub fn restaking_config(
        &mut self,
        restaking_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.restaking_config = Some(restaking_config);
        self
    }
    #[inline(always)]
    pub fn account_payer(&mut self, account_payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.account_payer = Some(account_payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn g1_pubkey(&mut self, g1_pubkey: [u8; 32]) -> &mut Self {
        self.g1_pubkey = Some(g1_pubkey);
        self
    }
    #[inline(always)]
    pub fn g2_pubkey(&mut self, g2_pubkey: [u8; 64]) -> &mut Self {
        self.g2_pubkey = Some(g2_pubkey);
        self
    }
    #[inline(always)]
    pub fn signature(&mut self, signature: [u8; 64]) -> &mut Self {
        self.signature = Some(signature);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = RegisterOperator {
            config: self.config.expect("config is not set"),
            operator_entry: self.operator_entry.expect("operator_entry is not set"),
            ncn: self.ncn.expect("ncn is not set"),
            operator: self.operator.expect("operator is not set"),
            operator_admin: self.operator_admin.expect("operator_admin is not set"),
            ncn_operator_state: self
                .ncn_operator_state
                .expect("ncn_operator_state is not set"),
            restaking_config: self.restaking_config.expect("restaking_config is not set"),
            account_payer: self.account_payer.expect("account_payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = RegisterOperatorInstructionArgs {
            g1_pubkey: self.g1_pubkey.clone().expect("g1_pubkey is not set"),
            g2_pubkey: self.g2_pubkey.clone().expect("g2_pubkey is not set"),
            signature: self.signature.clone().expect("signature is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `register_operator` CPI accounts.
pub struct RegisterOperatorCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_entry: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn_operator_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub restaking_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub account_payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `register_operator` CPI instruction.
pub struct RegisterOperatorCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_entry: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub ncn_operator_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub restaking_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub account_payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: RegisterOperatorInstructionArgs,
}

impl<'a, 'b> RegisterOperatorCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: RegisterOperatorCpiAccounts<'a, 'b>,
        args: RegisterOperatorInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            operator_entry: accounts.operator_entry,
            ncn: accounts.ncn,
            operator: accounts.operator,
            operator_admin: accounts.operator_admin,
            ncn_operator_state: accounts.ncn_operator_state,
            restaking_config: accounts.restaking_config,
            account_payer: accounts.account_payer,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator_entry.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ncn.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.operator.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.operator_admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ncn_operator_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.restaking_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.account_payer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = RegisterOperatorInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::NCN_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.operator_entry.clone());
        account_infos.push(self.ncn.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.operator_admin.clone());
        account_infos.push(self.ncn_operator_state.clone());
        account_infos.push(self.restaking_config.clone());
        account_infos.push(self.account_payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RegisterOperator` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` operator_entry
///   2. `[]` ncn
///   3. `[]` operator
///   4. `[signer]` operator_admin
///   5. `[]` ncn_operator_state
///   6. `[]` restaking_config
///   7. `[writable]` account_payer
///   8. `[]` system_program
#[derive(Clone, Debug)]
pub struct RegisterOperatorCpiBuilder<'a, 'b> {
    instruction: Box<RegisterOperatorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RegisterOperatorCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RegisterOperatorCpiBuilderInstruction {
            __program: program,
            config: None,
            operator_entry: None,
            ncn: None,
            operator: None,
            operator_admin: None,
            ncn_operator_state: None,
            restaking_config: None,
            account_payer: None,
            system_program: None,
            g1_pubkey: None,
            g2_pubkey: None,
            signature: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn operator_entry(
        &mut self,
        operator_entry: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator_entry = Some(operator_entry);
        self
    }
    #[inline(always)]
    pub fn ncn(&mut self, ncn: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.ncn = Some(ncn);
        self
    }
    #[inline(always)]
    pub fn operator(
        &mut self,
        operator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }
    #[inline(always)]
    pub fn operator_admin(
        &mut self,
        operator_admin: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator_admin = Some(operator_admin);
        self
    }
    #[inline(always)]
    pub fn ncn_operator_state(
        &mut self,
        ncn_operator_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ncn_operator_state = Some(ncn_operator_state);
        self
    }
    #[inline(always)]
    pub fn restaking_config(
        &mut self,
        restaking_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.restaking_config = Some(restaking_config);
        self
    }
    #[inline(always)]
    pub fn account_payer(
        &mut self,
        account_payer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.account_payer = Some(account_payer);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn g1_pubkey(&mut self, g1_pubkey: [u8; 32]) -> &mut Self {
        self.instruction.g1_pubkey = Some(g1_pubkey);
        self
    }
    #[inline(always)]
    pub fn g2_pubkey(&mut self, g2_pubkey: [u8; 64]) -> &mut Self {
        self.instruction.g2_pubkey = Some(g2_pubkey);
        self
    }
    #[inline(always)]
    pub fn signature(&mut self, signature: [u8; 64]) -> &mut Self {
        self.instruction.signature = Some(signature);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = RegisterOperatorInstructionArgs {
            g1_pubkey: self
                .instruction
                .g1_pubkey
                .clone()
                .expect("g1_pubkey is not set"),
            g2_pubkey: self
                .instruction
                .g2_pubkey
                .clone()
                .expect("g2_pubkey is not set"),
            signature: self
                .instruction
                .signature
                .clone()
                .expect("signature is not set"),
        };
        let instruction = RegisterOperatorCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            operator_entry: self
                .instruction
                .operator_entry
                .expect("operator_entry is not set"),

            ncn: self.instruction.ncn.expect("ncn is not set"),

            operator: self.instruction.operator.expect("operator is not set"),

            operator_admin: self
                .instruction
                .operator_admin
                .expect("operator_admin is not set"),

            ncn_operator_state: self
                .instruction
                .ncn_operator_state
                .expect("ncn_operator_state is not set"),

            restaking_config: self
                .instruction
                .restaking_config
                .expect("restaking_config is not set"),

            account_payer: self
                .instruction
                .account_payer
                .expect("account_payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct RegisterOperatorCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator_entry: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ncn: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator_admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ncn_operator_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    restaking_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    account_payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    g1_pubkey: Option<[u8; 32]>,
    g2_pubkey: Option<[u8; 64]>,
    signature: Option<[u8; 64]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
