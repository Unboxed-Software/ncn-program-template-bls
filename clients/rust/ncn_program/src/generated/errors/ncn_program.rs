//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum NcnProgramError {
    /// 0 - No valid Ballot
    #[error("No valid Ballot")]
    NoValidBallots = 0x0,
    /// 8448 - Zero in the denominator
    #[error("Zero in the denominator")]
    DenominatorIsZero = 0x2100,
    /// 8449 - Overflow
    #[error("Overflow")]
    ArithmeticOverflow = 0x2101,
    /// 8450 - Underflow
    #[error("Underflow")]
    ArithmeticUnderflowError = 0x2102,
    /// 8451 - Floor Overflow
    #[error("Floor Overflow")]
    ArithmeticFloorError = 0x2103,
    /// 8452 - Modulo Overflow
    #[error("Modulo Overflow")]
    ModuloOverflow = 0x2104,
    /// 8453 - New precise number error
    #[error("New precise number error")]
    NewPreciseNumberError = 0x2105,
    /// 8454 - Cast to imprecise number error
    #[error("Cast to imprecise number error")]
    CastToImpreciseNumberError = 0x2106,
    /// 8455 - Cast to u64 error
    #[error("Cast to u64 error")]
    CastToU64Error = 0x2107,
    /// 8456 - Cast to u128 error
    #[error("Cast to u128 error")]
    CastToU128Error = 0x2108,
    /// 8457 - NCN Operator Opt In Inactive
    #[error("NCN Operator Opt In Inactive")]
    NCNOperatorOptInInactive = 0x2109,
    /// 8458 - G1 Point Addition Error
    #[error("G1 Point Addition Error")]
    G1PointAdditionError = 0x210A,
    /// 8459 - G2 Point Addition Error
    #[error("G2 Point Addition Error")]
    G2PointAdditionError = 0x210B,
    /// 8704 - Incorrect weight table admin
    #[error("Incorrect weight table admin")]
    IncorrectWeightTableAdmin = 0x2200,
    /// 8705 - Duplicate mints in table
    #[error("Duplicate mints in table")]
    DuplicateMintsInTable = 0x2201,
    /// 8706 - There are no mints in the table
    #[error("There are no mints in the table")]
    NoMintsInTable = 0x2202,
    /// 8707 - Table not initialized
    #[error("Table not initialized")]
    TableNotInitialized = 0x2203,
    /// 8708 - Registry not initialized
    #[error("Registry not initialized")]
    RegistryNotInitialized = 0x2204,
    /// 8709 - There are no vaults in the registry
    #[error("There are no vaults in the registry")]
    NoVaultsInRegistry = 0x2205,
    /// 8710 - Vault not in weight table registry
    #[error("Vault not in weight table registry")]
    VaultNotInRegistry = 0x2206,
    /// 8711 - Mint is already in the table
    #[error("Mint is already in the table")]
    MintInTable = 0x2207,
    /// 8712 - Too many mints for table
    #[error("Too many mints for table")]
    TooManyMintsForTable = 0x2208,
    /// 8713 - Too many vaults for registry
    #[error("Too many vaults for registry")]
    TooManyVaultsForRegistry = 0x2209,
    /// 8714 - Weight table already initialized
    #[error("Weight table already initialized")]
    WeightTableAlreadyInitialized = 0x220A,
    /// 8715 - Cannnot create future weight tables
    #[error("Cannnot create future weight tables")]
    CannotCreateFutureWeightTables = 0x220B,
    /// 8716 - Weight mints do not match - length
    #[error("Weight mints do not match - length")]
    WeightMintsDoNotMatchLength = 0x220C,
    /// 8717 - Weight mints do not match - mint hash
    #[error("Weight mints do not match - mint hash")]
    WeightMintsDoNotMatchMintHash = 0x220D,
    /// 8718 - Invalid mint for weight table
    #[error("Invalid mint for weight table")]
    InvalidMintForWeightTable = 0x220E,
    /// 8719 - Config supported mints do not match NCN Vault Count
    #[error("Config supported mints do not match NCN Vault Count")]
    ConfigMintsNotUpdated = 0x220F,
    /// 8720 - NCN config vaults are at capacity
    #[error("NCN config vaults are at capacity")]
    ConfigMintListFull = 0x2210,
    /// 8721 - Vault Registry mints are at capacity
    #[error("Vault Registry mints are at capacity")]
    VaultRegistryListFull = 0x2211,
    /// 8722 - Operator Registry operators are at capacity
    #[error("Operator Registry operators are at capacity")]
    OperatorRegistryListFull = 0x2212,
    /// 8723 - Vault registry are locked for the epoch
    #[error("Vault registry are locked for the epoch")]
    VaultRegistryVaultLocked = 0x2213,
    /// 8724 - Vault index already in use by a different mint
    #[error("Vault index already in use by a different mint")]
    VaultIndexAlreadyInUse = 0x2214,
    /// 8725 - Mint Entry not found
    #[error("Mint Entry not found")]
    MintEntryNotFound = 0x2215,
    /// 8726 - Fee cap exceeded
    #[error("Fee cap exceeded")]
    FeeCapExceeded = 0x2216,
    /// 8727 - Total fees cannot be 0
    #[error("Total fees cannot be 0")]
    TotalFeesCannotBeZero = 0x2217,
    /// 8728 - Protocol wallet cannot be default
    #[error("Protocol wallet cannot be default")]
    DefaultProtocolWallet = 0x2218,
    /// 8729 - NCN Fee wallet cannot be default
    #[error("NCN Fee wallet cannot be default")]
    DefaultNcnWallet = 0x2219,
    /// 8730 - Incorrect NCN Admin
    #[error("Incorrect NCN Admin")]
    IncorrectNcnAdmin = 0x221A,
    /// 8731 - Incorrect NCN
    #[error("Incorrect NCN")]
    IncorrectNcn = 0x221B,
    /// 8732 - Incorrect fee admin
    #[error("Incorrect fee admin")]
    IncorrectFeeAdmin = 0x221C,
    /// 8733 - Weight table not finalized
    #[error("Weight table not finalized")]
    WeightTableNotFinalized = 0x221D,
    /// 8734 - Weight not found
    #[error("Weight not found")]
    WeightNotFound = 0x221E,
    /// 8735 - No operators in ncn
    #[error("No operators in ncn")]
    NoOperators = 0x221F,
    /// 8736 - Vault operator delegation is already finalized - should not happen
    #[error("Vault operator delegation is already finalized - should not happen")]
    VaultOperatorDelegationFinalized = 0x2220,
    /// 8737 - Operator snapshot is not active
    #[error("Operator snapshot is not active")]
    OperatorSnapshotIsNotActive = 0x2221,
    /// 8738 - Operator snapshot is already taken
    #[error("Operator snapshot is already taken")]
    OperatorSnapshotAlreadyTaked = 0x2222,
    /// 8739 - Operator has no minimum stake
    #[error("Operator has no minimum stake")]
    OperatorHasNoMinimumStake = 0x2223,
    /// 8740 - Operator snapshot is outdated
    #[error("Operator snapshot is outdated")]
    OperatorSnapshotOutdated = 0x2224,
    /// 8741 - epoch snapshot already finalized
    #[error("epoch snapshot already finalized")]
    EpochSnapshotAlreadyFinalized = 0x2225,
    /// 8742 - Too many vault operator delegations
    #[error("Too many vault operator delegations")]
    TooManyVaultOperatorDelegations = 0x2226,
    /// 8743 - Duplicate vault operator delegation
    #[error("Duplicate vault operator delegation")]
    DuplicateVaultOperatorDelegation = 0x2227,
    /// 8744 - Duplicate Vote Cast
    #[error("Duplicate Vote Cast")]
    DuplicateVoteCast = 0x2228,
    /// 8745 - Cannot Vote With Zero Delegation
    #[error("Cannot Vote With Zero Delegation")]
    CannotVoteWithZeroStake = 0x2229,
    /// 8746 - Operator Already Voted
    #[error("Operator Already Voted")]
    OperatorAlreadyVoted = 0x222A,
    /// 8747 - Operator votes full
    #[error("Operator votes full")]
    OperatorVotesFull = 0x222B,
    /// 8748 - Merkle root tally full
    #[error("Merkle root tally full")]
    BallotTallyFull = 0x222C,
    /// 8749 - Ballot tally not found
    #[error("Ballot tally not found")]
    BallotTallyNotFoundFull = 0x222D,
    /// 8750 - Ballot tally not empty
    #[error("Ballot tally not empty")]
    BallotTallyNotEmpty = 0x222E,
    /// 8751 - Consensus already reached, cannot change vote
    #[error("Consensus already reached, cannot change vote")]
    ConsensusAlreadyReached = 0x222F,
    /// 8752 - Consensus not reached
    #[error("Consensus not reached")]
    ConsensusNotReached = 0x2230,
    /// 8753 - Epoch snapshot not finalized
    #[error("Epoch snapshot not finalized")]
    EpochSnapshotNotFinalized = 0x2231,
    /// 8754 - Voting not valid, too many slots after consensus reached
    #[error("Voting not valid, too many slots after consensus reached")]
    VotingNotValid = 0x2232,
    /// 8755 - Tie breaker admin invalid
    #[error("Tie breaker admin invalid")]
    TieBreakerAdminInvalid = 0x2233,
    /// 8756 - Voting not finalized
    #[error("Voting not finalized")]
    VotingNotFinalized = 0x2234,
    /// 8757 - Tie breaking ballot must be one of the prior votes
    #[error("Tie breaking ballot must be one of the prior votes")]
    TieBreakerNotInPriorVotes = 0x2235,
    /// 8758 - Invalid merkle proof
    #[error("Invalid merkle proof")]
    InvalidMerkleProof = 0x2236,
    /// 8759 - Operator voter needs to sign its vote
    #[error("Operator voter needs to sign its vote")]
    InvalidOperatorVoter = 0x2237,
    /// 8760 - Not a valid NCN fee group
    #[error("Not a valid NCN fee group")]
    InvalidNcnFeeGroup = 0x2238,
    /// 8761 - Not a valid base fee group
    #[error("Not a valid base fee group")]
    InvalidBaseFeeGroup = 0x2239,
    /// 8762 - Destination mismatch
    #[error("Destination mismatch")]
    DestinationMismatch = 0x223A,
    /// 8763 - Fee not active
    #[error("Fee not active")]
    FeeNotActive = 0x223B,
    /// 8764 - Weight not set
    #[error("Weight not set")]
    WeightNotSet = 0x223C,
    /// 8765 - Invalid epochs before stall
    #[error("Invalid epochs before stall")]
    InvalidEpochsBeforeStall = 0x223D,
    /// 8766 - Invalid epochs before accounts can close
    #[error("Invalid epochs before accounts can close")]
    InvalidEpochsBeforeClose = 0x223E,
    /// 8767 - Invalid slots after consensus
    #[error("Invalid slots after consensus")]
    InvalidSlotsAfterConsensus = 0x223F,
    /// 8768 - Vault needs to be updated
    #[error("Vault needs to be updated")]
    VaultNeedsUpdate = 0x2240,
    /// 8769 - Invalid Account Status
    #[error("Invalid Account Status")]
    InvalidAccountStatus = 0x2241,
    /// 8770 - Account already initialized
    #[error("Account already initialized")]
    AccountAlreadyInitialized = 0x2242,
    /// 8771 - Cannot vote with uninitialized account
    #[error("Cannot vote with uninitialized account")]
    BadBallot = 0x2243,
    /// 8772 - Operator is not in snapshot
    #[error("Operator is not in snapshot")]
    OperatorIsNotInSnapshot = 0x2244,
    /// 8773 - Invalid account_to_close Discriminator
    #[error("Invalid account_to_close Discriminator")]
    InvalidAccountToCloseDiscriminator = 0x2245,
    /// 8774 - Cannot close account
    #[error("Cannot close account")]
    CannotCloseAccount = 0x2246,
    /// 8775 - Cannot close account - Already closed
    #[error("Cannot close account - Already closed")]
    CannotCloseAccountAlreadyClosed = 0x2247,
    /// 8776 - Cannot close account - Not enough epochs have passed since consensus reached
    #[error("Cannot close account - Not enough epochs have passed since consensus reached")]
    CannotCloseAccountNotEnoughEpochs = 0x2248,
    /// 8777 - Cannot close account - No receiver provided
    #[error("Cannot close account - No receiver provided")]
    CannotCloseAccountNoReceiverProvided = 0x2249,
    /// 8778 - Cannot close account - Not enough accounts
    #[error("Cannot close account - Not enough accounts")]
    CannotCloseAccountNoEnoughAccounts = 0x224A,
    /// 8779 - Cannot close epoch state account - Epoch state needs all other accounts to be closed first
    #[error("Cannot close epoch state account - Epoch state needs all other accounts to be closed first")]
    CannotCloseEpochStateAccount = 0x224B,
    /// 8780 - Invalid NCN Fee wallet
    #[error("Invalid NCN Fee wallet")]
    InvalidNCNFeeWallet = 0x224C,
    /// 8781 - Epoch is closing down
    #[error("Epoch is closing down")]
    EpochIsClosingDown = 0x224D,
    /// 8782 - Marker exists
    #[error("Marker exists")]
    MarkerExists = 0x224E,
    /// 8783 - Secret key error
    #[error("Secret key error")]
    SecretKeyError = 0x224F,
    /// 8784 - AltBN128 add error
    #[error("AltBN128 add error")]
    AltBN128AddError = 0x2250,
    /// 8785 - AltBN128 mul error
    #[error("AltBN128 mul error")]
    AltBN128MulError = 0x2251,
    /// 8786 - AltBN128 pairing error
    #[error("AltBN128 pairing error")]
    AltBN128PairingError = 0x2252,
    /// 8787 - Hash to curve error
    #[error("Hash to curve error")]
    HashToCurveError = 0x2253,
    /// 8788 - BLSSigning error
    #[error("BLSSigning error")]
    BLSSigningError = 0x2254,
    /// 8789 - BLSVerification error
    #[error("BLSVerification error")]
    BLSVerificationError = 0x2255,
    /// 8790 - Serialization error
    #[error("Serialization error")]
    SerializationError = 0x2256,
    /// 8791 - G1 point compression error
    #[error("G1 point compression error")]
    G1PointCompressionError = 0x2257,
    /// 8792 - G1 point decompression error
    #[error("G1 point decompression error")]
    G1PointDecompressionError = 0x2258,
    /// 8793 - G2 point compression error
    #[error("G2 point compression error")]
    G2PointCompressionError = 0x2259,
    /// 8794 - G2 point decompression error
    #[error("G2 point decompression error")]
    G2PointDecompressionError = 0x225A,
    /// 8795 - Invalid input length
    #[error("Invalid input length")]
    InvalidInputLength = 0x225B,
    /// 8796 - Invalid G1 Pubkey
    #[error("Invalid G1 Pubkey")]
    InvalidG1Pubkey = 0x225C,
    /// 8797 - Invalid Minimum Stake Weight
    #[error("Invalid Minimum Stake Weight")]
    InvalidMinimumStakeWeight = 0x225D,
    /// 8798 - Missing required signature
    #[error("Missing required signature")]
    MissingRequiredSignature = 0x225E,
    /// 8799 - Signature verification failed
    #[error("Signature verification failed")]
    SignatureVerificationFailed = 0x225F,
    /// 8800 - No non signers aggregated pubkey
    #[error("No non signers aggregated pubkey")]
    NoNonSignersAggregatedPubkey = 0x2260,
    /// 8801 - Quorum not met
    #[error("Quorum not met")]
    QuorumNotMet = 0x2261,
    /// 8802 - Operator <> NCN connection is not active
    #[error("Operator <> NCN connection is not active")]
    OperatorNcnConnectionNotActive = 0x2262,
}

impl solana_program::program_error::PrintProgramError for NcnProgramError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
